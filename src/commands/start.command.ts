import { Context, Telegraf } from "telegraf";
import { IBotContext } from "../context/context.interface";
import { Command } from "./command.class";
import axios from "axios";

export class StartCommand extends Command {
  aboutBot: string[] = [];
  chooseTour: string[] = [];
  messageText: string = "";
  chatId: number | undefined;
  // text: string | undefined;
  messageTextBudget: number | undefined ;
  webAppUrl: string = 'https://lucky-brigadeiros-dd2d36.netlify.app/'

  constructor(bot: Telegraf<IBotContext>) {
    super(bot);
  }
  // chatId: number;
  
  // –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
  handle(): void {
    this.bot.start((ctx) => {
      console.log(ctx.from.first_name);
      console.log(ctx.from.username);
      // console.log(ctx)
      this.aboutBot = [
        `–ó–¥—Ä—Å—Ç–≤—É–π—Ç–µ ${ctx.from.first_name},
            
–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –¢—É—Ä–ê–≥–µ–Ω—Å—Ç–≤–æ Caravan Tourizm, 

–Ø —è–≤–ª—è—é—Å—å –≤–∞—à–∏–º –¢—É—Ä–°–æ–ø—Ä–æ–≤–∞–¥–∏—Ç–µ–ª–µ–º –æ—Å–Ω–æ–≤–∞–Ω–æ–º –Ω–∞ –ò—Å—Å–∫—É—Å—Ç–≤–µ–Ω–Ω–æ–º –ò–Ω—Ç–µ–ª–µ–∫—Ç–µ –ø–µ—Ä–≤–æ–º –≤ –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω–µ`,
      ];
      ctx.reply(`${this.aboutBot}`, {
          reply_markup: {
            inline_keyboard: [
                /* One button */
                [ { text: "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ —Ç—É—Ä—ã ‚òÄÔ∏è üèñ", web_app: {url: this.webAppUrl} }], [{ text: "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≥–æ—Ä—è—á–∏–µ —Ç—É—Ä—ã üî•", web_app: {url: this.webAppUrl} } ],
                
                /* Also, we can have URL buttons. */
                [ { text: "–°–¥–µ–ª–∞—Ç —Å–µ–±–µ —Ç—É—Ä —Å –ø–æ–º–æ—â—å—é –ò–ò ü§ñ", callback_data: 'makeForAi' } ]
            ],
          }   
      });
      console.log(ctx.reply);
    });

    this.bot.action("makeForAi", (ctx) => {
      ctx.sendMessage("–ó–∞–ø–∏—à–∏—Ç–µ –∫—É–¥–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è?")
    })

    this.bot.on('message', async (ctx: Context) => {
      const message = ctx.message;
      if (message && 'text' in message) {
        const messageText = message.text;
        console.log('–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:', messageText);
      }else {
        console.log("Not found text");
      }

      async function Budget() {
        console.log(message)
        await ctx.sendMessage("–ö–∞–∫–æ–π —É –≤–∞—Å –±—é–¥–∂–µ—Ç –≤ $?")
        if (ctx.sendMessage) 
        if (message && 'text' in message) {
          const messageText = message.text;
          const messageBudget = Number.parseInt(messageText);
          // const messageBudget = 300
          if (messageBudget) {
            console.log('–¢–µ–∫—Å—Ç budget:', messageBudget);
            // const locaton = 'https://maps.google.com/maps?q=41.341988,69.229491&ll=41.341988,69.229491&z=16'
            // –£—Å–ª–æ–≤–∏–µ 
            if (messageBudget < 400) {
              // ctx.sendLocation(locaton)
              console.log("Not enought")
              ctx.sendMessage('–≠—Ç–æ–≥–æ –∫–∞–ø–∏—Ç–∞–ª–∞ –Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—èüò¢')
            }else {
              ctx.sendMessage('–ü—Ä–µ–∫—Ä–∞—Å–Ω–æüòÅ')
              console.log("Good")
            }
          }
        }else {
          console.log("Not found text");
        }
      } 

      Budget()

      // this.bot.on('message', async (ctx) => {
      //   const message = ctx.message;
      //   if (message && 'text' in message) {
      //     console.log('GOOOOOOD');
      //     const messageTextBudget = message.text;
      //     return messageTextBudget
      //   }else {
      //     console.log("Not found text");
      //   }
      //   const budget = await Number(this.messageTextBudget)
      //   if (budget < 400) {
      //     console.log('Bad')
      //   }else {
      //     console.log('good')
      //   }
      //   ctx.reply('–ö–∞–∫–æ–π —É –≤–∞—Å –±—é–¥–∂–µ—Ç –≤ $?')
      // })
      // –í–∞—à API-–∫–ª—é—á OpenAI
      const apiKey = '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';

      // eslint-disable-next-line @typescript-eslint/no-unused-vars


      // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –∫ API
      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      async function sendMessage(message: string): Promise<string> {
        // let messageContent = ''
        try {
          const response = await axios.post(
            'https://api.openai.com/v1/chat/completions',
            {
              model: 'gpt-3.5-turbo',
              messages: [{ role: 'system', content: 'You are Alexander.' }, { role: 'user', content: message}],
            },
            {
              headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${apiKey}`,
              },
            }
          );

          // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç API
          const choices = response.data.choices;
          const reply = choices[0].message.content;

          return reply;
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ API:', error);
          throw error;
        }
      }

      // –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
      // async function main() {

      //   const data = {
      //     // destination: "Dubai",
      //     user_input_in_russia: `–ù–∞–π–¥–∏ –º–Ω–µ 3 —Ç—É—Ä–∞ –≤ ${destination} –∏–∑ –¢–∞—à–∫–µ–Ω—Ç–∞ —Å –±—é–¥–∂–µ—Ç–æ–º 1000$ –Ω–∞ –≤–µ—Å—å —Ç—É—Ä –∏ —Å –æ—Ç–µ–ª–µ–º –Ω–µ –º–µ–Ω–µ–µ 3 –∏–ª–∏ 4 –∑–≤–µ–∑–¥ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ—Ç–∫—É–¥–∞ –∏ —Ç—ã –¥–æ–ª–∂–µ–Ω –∏—Å–∫–∞—Ç—å —Ç—É—Ä—ã –Ω–∞ —Å–∞–π—Ç–µ `,
      //     check_in: "2023-09-29",
      //     check_out: "2023-10-01",
      //     property_types: ["HOTEL"]
      //   };

      //   const reply : string = await sendMessage(JSON.stringify(data))
      //   console.log('–û—Ç–≤–µ—Ç ChatGPT:', reply);

      //   ctx.sendMessage(reply)
      // }

      // main();
    });
    
    // this.bot.on('message', (ctx) => {
    //   const message = ctx.message;
    //   if (message && 'text' in message) {
    //     const messageBudget = Number(message.text)
    //     console.log('–¢–µ–∫—Å—Ç budget:', typeof messageBudget);
    //     // –£—Å–ª–æ–≤–∏–µ 
    //     if(messageBudget < 400) {
    //       console.log("Good")
    //     }else {
    //       ctx.sendMessage('–≠—Ç–æ–≥–æ –∫–∞–ø–∏—Ç–∞–ª–∞ –Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—èüò¢')
    //       console.log("Not enought")
    //     }
    //   }else {
    //     console.log("Not found text");
    //   }
    // })
  }
}


