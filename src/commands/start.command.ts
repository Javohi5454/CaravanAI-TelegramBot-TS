import { Context, Telegraf } from "telegraf";
import { IBotContext } from "../context/context.interface";
import { Command } from "./command.class";

export class StartCommand extends Command {
  aboutBot: string[] = [];
  chooseTour: string[] = [];
  messageText: string = "";
  chatId: number | undefined;
  // text: string | undefined;
  
  webAppUrl: string = 'https://ya.ru'
  
  constructor(bot: Telegraf<IBotContext>) {
    super(bot);
  }
  // chatId: number;
  
  // –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
  handle(): void {
    this.bot.start((ctx) => {
      console.log(ctx.from.first_name);
      console.log(ctx.from.username);
      this.aboutBot = [
        `–ó–¥—Ä—Å—Ç–≤—É–π—Ç–µ ${ctx.from.first_name},
            
–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –¢—É—Ä–ê–≥–µ–Ω—Å—Ç–≤–æ Caravan Tourizm, 

–Ø —è–≤–ª—è—é—Å—å –≤–∞—à–∏–º –¢—É—Ä–°–æ–ø—Ä–æ–≤–∞–¥–∏—Ç–µ–ª–µ–º –æ—Å–Ω–æ–≤–∞–Ω–æ–º –Ω–∞ –ò—Å—Å–∫—É—Å—Ç–≤–µ–Ω–Ω–æ–º –ò–Ω—Ç–µ–ª–µ–∫—Ç–µ –ø–µ—Ä–≤–æ–º –≤ –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω–µ`,
      ];
      ctx.reply(`${this.aboutBot}`, {
          reply_markup: {
            inline_keyboard: [
                /* One button */
                [ { text: "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ —Ç—É—Ä—ã ‚òÄÔ∏è üèñ", web_app: {url: this.webAppUrl} }], [{ text: "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≥–æ—Ä—è—á–∏–µ —Ç—É—Ä—ã üî•", web_app: {url: this.webAppUrl} } ],
                
                /* Also, we can have URL buttons. */
                [ { text: "–°–¥–µ–ª–∞—Ç —Å–µ–±–µ —Ç—É—Ä —Å –ø–æ–º–æ—â—å—é –ò–ò ü§ñ", callback_data: 'makeForAi' } ]
            ],
          }   
      });
      console.log(ctx.reply);
    });
    this.bot.action("makeForAi", (ctx) => {
      ctx.sendMessage("–ó–∞–ø–∏—à–∏—Ç–µ –∫—É–¥–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è?")
    })
    this.bot.on('message', async (ctx: Context) => {
      
      // const messageText =  await ctx.message?.text;
      // console.log('–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:', messageText);
      
      const message = ctx.message;
      if (message && 'text' in message) {
        const messageText = message.text;
        console.log('–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:', messageText);
      }else {
        console.log("Not found text");
        
      }
    });
  }
}

