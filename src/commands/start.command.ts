// eslint-disable-next-line @typescript-eslint/no-unused-vars
import { Context, Markup, Telegraf, Composer, session, Scenes } from "telegraf";
import { IBotContext } from "../context/context.interface";
import { Command } from "./command.class";
// eslint-disable-next-line @typescript-eslint/no-unused-vars
import axios from "axios";

export class StartCommand extends Command {
  aboutBot: string[] = [];
  chooseTour: string[] = [];
  messageText: string = "";
  chatId: number | undefined;
  messageTextBudget: number | undefined ;
  webAppUrl: string = 'https://verdant-zabaione-953597.netlify.app/'

  constructor(bot: Telegraf<IBotContext>) {
    super(bot);
  }
  
  // –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ 
  handle(): void {
    // const myScene = new Scenes.BaseScene<Context>('myScene');
    // const stage = new Scenes.Stage<Context>([myScene]);
    
    // const menuScene = new Scenes.WizardScene('scneneWizard', startWizard);
    // start
    this.bot.start(async (ctx) => {
      console.log(ctx.from.first_name);
      console.log(ctx.from.username);
      
      this.aboutBot = [
        `–ó–¥—Ä—Å—Ç–≤—É–π—Ç–µ ${ctx.from.first_name},
            
–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –¢—É—Ä–ê–≥–µ–Ω—Å—Ç–≤–æ Caravan Tourizm, 

–Ø —è–≤–ª—è—é—Å—å –≤–∞—à–∏–º –¢—É—Ä–°–æ–ø—Ä–æ–≤–∞–¥–∏—Ç–µ–ª–µ–º –æ—Å–Ω–æ–≤–∞–Ω–æ–º –Ω–∞ –ò—Å—Å–∫—É—Å—Ç–≤–µ–Ω–Ω–æ–º –ò–Ω—Ç–µ–ª–µ–∫—Ç–µ –ø–µ—Ä–≤–æ–º –≤ –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω–µ

–ï—Å–ª–∏ –≤—ã –Ω–µ—Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–±–∏—Ä–∞—Ç —Ç—É—Ä —Å–∞–º–æ–º—É —Ç–æ –ø—Ä–æ—Å–∏–º –≤–∞—Å –Ω–∞–∂–º–∞—Ç –Ω–∞ –∫–Ω–æ–ø–∫—É "AirCaravan"

`,
      ];
      ctx.reply(`${this.aboutBot}`, {
          reply_markup: {
            inline_keyboard: [
                /* One button */
                [ { text: "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ —Ç—É—Ä—ã ‚òÄÔ∏è üèñ", web_app: {url: this.webAppUrl} }], [{ text: "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≥–æ—Ä—è—á–∏–µ —Ç—É—Ä—ã üî•", web_app: {url: this.webAppUrl} } ],
                
                /* Also, we can have URL buttons. */
                [ { text: "–°–¥–µ–ª–∞—Ç —Å–µ–±–µ —Ç—É—Ä —Å –ø–æ–º–æ—â—å—é –ò–ò ü§ñ", callback_data: 'makeForAi' } ]
            ],
          }, 
      });
      const mainMenuKeyboard = Markup.keyboard([
        Markup.button.callback('–ù–∞–π—Ç–∏ –Ω–∞—Å üîçüó∫', 'addAction'),Markup.button.callback('–°–≤—è–∑–∞—Ç—Å—è —Å –Ω–∞–º–∏ ‚òéÔ∏è', 'addAction'),
        Markup.button.callback('–°–¥–µ–ª–∞—Ç —Å–µ–±–µ —Ç—É—Ä —Å –ø–æ–º–æ—â—å—é –ò–ò ü§ñ', 'addAction')
        ],{columns: 2}).resize();
        
        ctx.reply("–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –ª–∏—á–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é, —Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –ù–∞–π—Ç–∏ –Ω–∞—Å üîçüó∫ —Ç–æ –ø—Ä–∏—Ö–æ–¥–∏—Ç–µ –≤ –Ω–∞—à —Ñ–∏–ª–∏–∞–ª, –±—É–¥–µ–º —Ä–∞–¥—ã –≤–∞—Å —Ç–∞–º –≤–∏–¥–µ—Ç—å üè™", mainMenuKeyboard)

    });


    this.bot.hears('–ù–∞–π—Ç–∏ –Ω–∞—Å üîçüó∫', async (ctx: Context) => {
      try {
        // –û—Ç–ø—Ä–∞–≤–∫–∞ –ª–æ–∫–∞—Ü–∏–∏ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É /location
        await ctx.reply('–° —Ä–∞–¥–æ—Å—Ç—å—é –∂–¥–µ–º –≤–∞—Å –≤ –Ω–∞—à–µ–º —Ñ–∏–ª–∏–∞–ª–µüòá') // –ó–∞–º–µ–Ω–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–∞ –Ω—É–∂–Ω—ã–µ –≤–∞–º
        await ctx.replyWithLocation(41.3156257273364, 69.32864228814121);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª–æ–∫–∞—Ü–∏–∏:', error);
        ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª–æ–∫–∞—Ü–∏–∏.');
      }
    });
    this.bot.hears('–°–≤—è–∑–∞—Ç—Å—è —Å –Ω–∞–º–∏ ‚òéÔ∏è', async (ctx) => {
      // const contactNumber = '+998970396454'
      await ctx.sendMessage('—Å –Ω–µ—Ç–µ—Ä–ø–µ–Ω–∏–µ–º –∂–¥–µ–º –≤–∞—Å –∑–≤–æ–Ω–æ–∫üòäüìû')
      await ctx.replyWithContact('+998998970396454', '–°–≤—è–∑–∞—Ç—Å—è —Å –Ω–∞–º–∏üìû')
    })
    this.bot.action("makeForAi", async (ctx) => {
      ctx.sendMessage("–ó–∞–ø–∏—à–∏—Ç–µ –∫—É–¥–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è?")
      
    })
    // this.bot.hears('', (ctx) => {
    //   const reqNumber = Markup.inlineKeyboard([
    //     Markup.button.contactRequest()
    //   ])
    //   ctx.reply()
    // })

    
    this.bot.hears("–°–¥–µ–ª–∞—Ç —Å–µ–±–µ —Ç—É—Ä —Å –ø–æ–º–æ—â—å—é –ò–ò ü§ñ", async (ctx) => {
      ctx.sendMessage("–ó–∞–ø–∏—à–∏—Ç–µ –∫—É–¥–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è?")
    })
    // senddata (send messages to group)
    this.bot.command('senddata', async (ctx) => {
      try {
        // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É
        const groupId = '-4074004517';
        const message = '–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ‚úÖ';
        console.log('Data to send succes‚úÖ')
        await ctx.telegram.sendMessage(groupId, message);
        ctx.reply('–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –≥—Ä—É–ø–ø—É‚úÖ!');
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö:', error);
        ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö.');
      }
    });
    // location

    this.bot.on('message', async (ctx) => {
      const message = ctx.message;
      if (message && 'text' in message) {
        const messageText = message.text;
        console.log('–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:', messageText);
        if (!this.messageText) {
          this.messageText = messageText;
          ctx.sendMessage("–ö–∞–∫–æ–π —É –≤–∞—Å –±—é–¥–∂–µ—Ç –≤ $?")
        } else if (!this.messageTextBudget) {
          const messageBudget = Number.parseInt(messageText);
          if (messageBudget) {
            console.log('–¢–µ–∫—Å—Ç budget:', messageBudget);
            this.messageTextBudget = messageBudget;
            if (messageBudget < 400) {
              console.log("Not enough");
              await ctx.sendMessage('–≠—Ç–æ–≥–æ –∫–∞–ø–∏—Ç–∞–ª–∞ –Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è üò¢');
              await ctx.sendMessage('–ü—Ä–æ—Å–∏–º –≤–∞—Å –ø–æ–¥–Ω—è—Ç—å –ø–ª–∞–Ω–∫—É –≤ –±—é–¥–∂–µ—Ç—É –¥–ª—è –≤–∞—à–µ–≥–æ –±—É–¥–µ—â–µ–≥–æ –ø—É—Ç–∏—â–µ—Å—Ç–≤–∏—è –∏ –≤–Ω–∏–∑—É –Ω–∞–∂–∞—Ç—å –≤–Ω–∏–∑—É —Å–¥–µ–ª–∞—Ç—å —Ç—É—Ä —Å –ø–æ–º–æ—â—å—é –ò–ò ü§ñ')
            } else {
              ctx.sendMessage('–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ üòÅ');
              ctx.sendMessage('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–º–µ—Ä–Ω—É—é –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç—É—Ä–∞ (–≤ –¥–Ω—è—Ö):')
              
              console.log("Good");
              // –í–∞—à–∏ –¥–∞–ª—å–Ω–µ–π—à–∏–µ –¥–µ–π—Å—Ç–≤–∏—è —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ messageText –∏ messageTextBudget
            }
          }
        }
      } else {
        console.log("Not found text");
      }

    });
    // const stage = new Scenes.Stage<Context>([myScene]);
    
    // myScene.on('text', async (ctx) => {
    //   const message = ctx.message.text;
    //   await ctx.reply(`–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏: ${message}`);
    // });
    // this.bot.use(session());
    // this.bot.use(stage.middleware());
  }
}



// const scenarioTypeScene = new Scenes.BaseScene('SCENARIO_TYPE_SCENE_ID');

// scenarioTypeScene.enter((ctx) => {
//   ctx.session.myData = {};
//   ctx.reply('What is your drug?', Markup.inlineKeyboard([
//     Markup.button.callbackButton('Movie', 'MOVIE_ACTION'),
//     Markup.button.callbackButton('Theater', 'THEATER_ACTION')
//   ]));
// });

// scenarioTypeScene.action(THEATER_ACTION, (ctx) => {
//   ctx.reply('You choose theater');
//   ctx.session.myData.preferenceType = 'Theater';
//   return ctx.scene.enter('SOME_OTHER_SCENE_ID'); // switch to some other scene
// });

// scenarioTypeScene.action(MOVIE_ACTION, (ctx) => {
//   ctx.reply('You choose movie, your loss');
//   ctx.session.myData.preferenceType = 'Movie';
//   return ctx.scene.leave(); // exit global namespace
// });

// scenarioTypeScene.leave((ctx) => {
//   ctx.reply('Thank you for your time!');
// });

// // What to do if user entered a raw message or picked some other option?
// scenarioTypeScene.use((ctx) => ctx.replyWithMarkdown('Please choose either Movie or Theater'));
    
